const Fandom = require('../../db/models/fandom');
const responses = require('../../data/responses.json');
const validateEnvironment = require('../../utils/validateEnvironment')

module.exports = async (context) => {
  const args = context.text.split(/\s+/).slice(1);
  const chat_id = context.peerId;
  let response = '';

  if (!(await validateEnvironment(context, { requireChat: true }))) return;
  if (args.id && args.command && !(await validateEnvironment(context, { requireAdmin: true }))) return;

  if (args.length === 0) {
    const fandoms = await Fandom.getFandomList(chat_id);
    if (fandoms.length > 0) {
      response = `üìù –°–ø–∏—Å–æ–∫ —Ñ–∞–Ω–¥–æ–º–æ–≤ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:\n` + fandoms
        .map(f => f.name)
        .sort()
        .join('\n');
    } else {
      response = `${responses.errors.not_found} –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [/—Ñ–∞–Ω–¥–æ–º –¥–æ–±–∞–≤–∏—Ç—å]`;
    }
  } else {
    if (args.length < 2 && args[0].toLowerCase() !== '—É–¥–∞–ª–∏—Ç—å') {
      response = responses.errors.invalid_input;
      return await context.send(response);
    }

    const command = args[0].toLowerCase();
    const fandomName = args.slice(1).join(' ');

    switch (command) {
      case '–¥–æ–±–∞–≤–∏—Ç—å':
        try {
          await Fandom.createFandom(chat_id, fandomName);
          response = responses.success.added;
        } catch (error) {
          console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–Ω–¥–æ–º–∞\n${error}`);
          response = error.name === 'AlreadyExistsError'
            ? `${responses.errors.already_exists} –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–Ω–¥–æ–º–∞.`
            : responses.errors.db;
        }
        break;

      case '–∏–∑–º–µ–Ω–∏—Ç—å':
        if (!fandomName.includes(' , ')) {
          response = responses.errors.invalid_input + ' –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–Ω–¥–æ–º–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –¥–≤—É–º—è –ø—Ä–æ–±–µ–ª–∞–º–∏ [ , ].';
          break;
        }
        const [oldName, newName] = fandomName.split(' , ').map(name => name.trim());
        try {
          await Fandom.updateFandom(chat_id, oldName, newName);
          response = responses.success.updated;
        } catch (error) {
          console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–Ω–¥–æ–º–∞\n${error}`);
          response = error.name === 'NotFoundError'
            ? `${responses.errors.not_found} –§–∞–Ω–¥–æ–º–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
            : error.name === 'AlreadyExistsError'
              ? `${responses.errors.already_exists} –§–∞–Ω–¥–æ–º —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
              : responses.errors.db;
        }
        break;

      case '—É–¥–∞–ª–∏—Ç—å':
        try {
          await Fandom.deleteFandom(chat_id, fandomName);
          response = responses.success.deleted;
        } catch (error) {
          console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–Ω–¥–æ–º–∞\n${error}`);
          response = error.name === 'NotFoundError'
            ? `${responses.errors.not_found} –§–∞–Ω–¥–æ–º–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
            : responses.errors.db;
        }
        break;
      default:
        response = responses.errors.unknown_command;
        break;
    }
  }

  try {
    await context.send(response);
  } catch (err) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n${err}`);
    await context.send(responses.errors.default);
  }
};
